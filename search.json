[{"path":"https://blueskypie.github.io/citree/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 citree authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://blueskypie.github.io/citree/articles/citree-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"citree-vignette","text":"main function citree::runCtree(), wrapper partykit::ctree() addition functions: partykit::ctree() produces best separation node, .e. one tree. setting recursive = T citree::runCtree(), trees meeting p-val cutoff produced saved. round recursion done removing 1st splitting variable input data.frame running runCtree(); recursion stops splitting variable found. info stats node tree collected summarized excel file, also contains ULRs tree. running partykit::ctree(), low-informative columns rows removed reduce computation adjustment association p-vals Note: ctree uses coin::independence_test() test association two variables data type. See theory behind test, explanation algorithm. see discussions pros cons ctree comparison trees, e.g. rpart.","code":""},{"path":"https://blueskypie.github.io/citree/articles/citree-vignette.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"citree-vignette","text":"check tmp directory output.","code":"library(citree) data('mtcars') re=runCtree(mtcars,'mtcars',oDir='tmp')"},{"path":"https://blueskypie.github.io/citree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jike Cui. Author, maintainer.","code":""},{"path":"https://blueskypie.github.io/citree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cui J (2024). citree: Recursive conditional inference tree. R package version 0.1.2, https://blueskypie.github.io/citree/, https://github.com/blueskypie/citree.","code":"@Manual{,   title = {citree: Recursive conditional inference tree},   author = {Jike Cui},   year = {2024},   note = {R package version 0.1.2,     https://blueskypie.github.io/citree/},   url = {https://github.com/blueskypie/citree}, }"},{"path":"https://blueskypie.github.io/citree/index.html","id":"citree","dir":"","previous_headings":"","what":"Recursive conditional inference tree","title":"Recursive conditional inference tree","text":"main function package runCtree(), wrapper partykit::ctree() addition functions: partykit::ctree() produces best separation node, .e. one tree. setting recursive = T runCtree(), trees meeting p-val cutoff produced can examined see one makes sense according domain knowledge. round recursion done removing 1st splitting variable input data.frame running runCtree(); recursion stops splitting variable found. info stats node tree collected summarized excel file, also contains ULRs tree. running partykit::ctree(), low-informative columns rows removed reduce computation adjustment association p-vals. Cases leading crashes partykit::ctree() handled, e.g. Inf -Inf converted NA avoid following errors: ” ‘breaks’ unique”. Note: ctree uses coin::independence_test() test association two variables data type. See theory behind test, explanation algorithm, nice tutorial. see discussions pros cons ctree comparison trees, e.g. rpart. See manual examples","code":""},{"path":"https://blueskypie.github.io/citree/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Recursive conditional inference tree","text":"Since just toy, plan submit CRAN. please install github directly:","code":"devtools::install_github(\"blueskypie/citree\")"},{"path":"https://blueskypie.github.io/citree/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Recursive conditional inference tree","text":"check tmp directory output.","code":"library(citree) data('mtcars') re=runCtree(mtcars,'mtcars',oDir='tmp')"},{"path":"https://blueskypie.github.io/citree/reference/addURL2df.html","id":null,"dir":"Reference","previous_headings":"","what":"add URLs to one column of a data.frame — addURL2df","title":"add URLs to one column of a data.frame — addURL2df","text":"Note package openxlsx loaded attached function.","code":""},{"path":"https://blueskypie.github.io/citree/reference/addURL2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add URLs to one column of a data.frame — addURL2df","text":"","code":"addURL2df(df1, textColm, urlColm, fromRow = 1, fName = NULL, ...)"},{"path":"https://blueskypie.github.io/citree/reference/addURL2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add URLs to one column of a data.frame — addURL2df","text":"df1 data.frame textColm int char; column display text URL urlColm int char; column URL fromRow int; starting row fName char; output file name ... passed openxlsx::saveWorkbook()","code":""},{"path":"https://blueskypie.github.io/citree/reference/addURL2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add URLs to one column of a data.frame — addURL2df","text":"none default; see return openxlsx::saveWorkbook() details.","code":""},{"path":"https://blueskypie.github.io/citree/reference/addURL2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add URLs to one column of a data.frame — addURL2df","text":"","code":"# none"},{"path":"https://blueskypie.github.io/citree/reference/ctree2splitInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"get info of significant variables in each node of a ctree — ctree2splitInfo","title":"get info of significant variables in each node of a ctree — ctree2splitInfo","text":"see @return details. Note package partykit loaded, attached, function.","code":""},{"path":"https://blueskypie.github.io/citree/reference/ctree2splitInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get info of significant variables in each node of a ctree — ctree2splitInfo","text":"","code":"ctree2splitInfo(cRe, pCut, nodeInds = partykit::nodeids(cRe, terminal = F))"},{"path":"https://blueskypie.github.io/citree/reference/ctree2splitInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get info of significant variables in each node of a ctree — ctree2splitInfo","text":"cRe object returned partykit::ctree() pCut numeric; p-val cutoff significant nodeInds int vectors, e.g. 1:5 tree five nodes, including leaves","code":""},{"path":"https://blueskypie.github.io/citree/reference/ctree2splitInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get info of significant variables in each node of a ctree — ctree2splitInfo","text":"return list following items: pVals list significant variables node nodeInds excluding leaves; length(pVals): number internal nodes names(pVals): name splitting variable node item pVals numeric vector p-vals variables whose p-val <= pCut, ordered increasing p-vals spVars.df data.frame following four columns, one node per row, variable: name splitting variable (spVar) pVal: p-val spVar sCut: splitting point gtOnRight: T/F; observations greater (gt: greater ) values right branch node? separation numeric spVar always <= >; leaves listed increasing y, gtOnRight==T means spVar positive association y. spVars.str, string combining rows spVars.df. rows separated ';' cells ',' cRe one root node, .e. splitting, NULL returned","code":""},{"path":"https://blueskypie.github.io/citree/reference/ctree2splitInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get info of significant variables in each node of a ctree — ctree2splitInfo","text":"","code":"# none"},{"path":"https://blueskypie.github.io/citree/reference/rmNA.html","id":null,"dir":"Reference","previous_headings":"","what":"remove rows or columns with missing values in a data.frame or matrix — rmNA","title":"remove rows or columns with missing values in a data.frame or matrix — rmNA","text":"remove rows columns missing values data.frame matrix","code":""},{"path":"https://blueskypie.github.io/citree/reference/rmNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove rows or columns with missing values in a data.frame or matrix — rmNA","text":"","code":"rmNA(df1, margins = 1, maxNA.perc = 0.95, minNonNA.count = 5)"},{"path":"https://blueskypie.github.io/citree/reference/rmNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove rows or columns with missing values in a data.frame or matrix — rmNA","text":"df1 data.frame matrix margins int vector 1 2 rows columns; e.g. 2:1 means removal order column row. maxNA.perc, minNonNA.count maximum %NA minimum non-NA items allowed failure match either leads removal","code":""},{"path":"https://blueskypie.github.io/citree/reference/rmNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove rows or columns with missing values in a data.frame or matrix — rmNA","text":"df1 cleaning; data type kept even 0 1 row column remains","code":""},{"path":"https://blueskypie.github.io/citree/reference/rmNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove rows or columns with missing values in a data.frame or matrix — rmNA","text":"","code":"# none"},{"path":"https://blueskypie.github.io/citree/reference/rmNZV.html","id":null,"dir":"Reference","previous_headings":"","what":"remove columns of near zero variance in a data.frame or matrix. — rmNZV","title":"remove columns of near zero variance in a data.frame or matrix. — rmNZV","text":"applies data type whereas caret::nearZeroVar() numeric columns.","code":""},{"path":"https://blueskypie.github.io/citree/reference/rmNZV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove columns of near zero variance in a data.frame or matrix. — rmNZV","text":"","code":"rmNZV(df1, minUniPerc = 0.05, minUniCount = 5)"},{"path":"https://blueskypie.github.io/citree/reference/rmNZV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove columns of near zero variance in a data.frame or matrix. — rmNZV","text":"df1 data.frame matrix minUniPerc, minUniCount criteria remove columns unique values values except common value, e.g. 1,4,2 c(1,2,3,3,4). uniCount uniPerc count percentage samples unique values failure match either leads removal","code":""},{"path":"https://blueskypie.github.io/citree/reference/rmNZV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove columns of near zero variance in a data.frame or matrix. — rmNZV","text":"cleaned df1; data type kept even 0 1 column remains","code":""},{"path":"https://blueskypie.github.io/citree/reference/rmNZV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove columns of near zero variance in a data.frame or matrix. — rmNZV","text":"","code":"# none"},{"path":"https://blueskypie.github.io/citree/reference/runCtree.html","id":null,"dir":"Reference","previous_headings":"","what":"run conditional inference tree with additional support — runCtree","title":"run conditional inference tree with additional support — runCtree","text":"partykit::ctree() function gives best separation node, .e. one tree. wrapper provides following supports: setting recursive = T, trees meeting p-val cutoff produced saved. round recursion done removing 1st splitting variable input data.frame running runCtree(); recursion stops splitting variable found. info stats node tree collected summarized excel file, also contains ULRs tree. running partykit::ctree(),  rmNA() rmNZV() run remove low-informative columns rows reduce computation adjustment association p-vals Cases leading crashes partykit::ctree() handled, e.g. Inf -Inf converted NA avoid following errors: \" 'breaks' unique\"","code":""},{"path":"https://blueskypie.github.io/citree/reference/runCtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run conditional inference tree with additional support — runCtree","text":"","code":"runCtree(   df1,   cohort,   oDir,   yi = 1,   pCut = 0.05,   recursive = T,   getReturn = T,   ctrlParas = list(minsplit = 10, minbucket = 5, maxsurrogate = 2, alpha = pCut),   naParas = list(margins = 1, maxNA.perc = 0.95, minNonNA.count = 5),   nzvParas = list(minUniPerc = 0.05, minUniCount = 5),   gList = NULL )"},{"path":"https://blueskypie.github.io/citree/reference/runCtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run conditional inference tree with additional support — runCtree","text":"df1 data.frame; columns variables rows observations cohort char; name observation cohort annotation drawn tree oDir char; output directory tree plot summary excel file; one pdf file tree file named paste0(oDir,.Platform$file.sep, cohort,'.',yName,'.',gList$counter,'.pdf') excel file content stats @return (see ), named paste0(oDir,.Platform$file.sep,cohort,'.xlsx') yi int; index y variable pCut p-val significant association; adjusted. recursive logical; F: produce best tree T: produce trees meeting pCut getReturn logical; T, return list ; returns otherwise. also used reduce internal data transfer load recursive = T. ctrlParas list; parameters partykit::ctree_control() naParas list; parameters rmNA(); set NULL skip step. nzvParas list; parameters rmNZV(); set NULL skip step. gList listenv list; internal recursion tracking; users ignore argument.","code":""},{"path":"https://blueskypie.github.io/citree/reference/runCtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run conditional inference tree with additional support — runCtree","text":"getReturn, list following items; none otherwise. df: cleaned df1; NA df1 one column < 10 rows y values. stats: possible values: NA ctree() run due one following reasons: one column df1 < 10 rows y NA y low variance removed rmNZV() tree fitting pCut found. case, try increasing pCut data.frame following columns, one tree per row counter: index tree drawing cohort, y, pCutoff spVar1,pVal1: name p-val splitting variable node 1 nNode: number nodes tree spVars: string containing names stats splitting variables. node, format \"name,p-val,cut,gtOnRight\" nodes separated ';'. plot: path tree plot","code":""},{"path":"https://blueskypie.github.io/citree/reference/runCtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"run conditional inference tree with additional support — runCtree","text":"Note: packages partykit openxlsx loaded, attached, function. ctree uses coin::independence_test() test association two variables data type. See theory behind test, explanation algorithm.","code":""},{"path":"https://blueskypie.github.io/citree/reference/runCtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"run conditional inference tree with additional support — runCtree","text":"","code":"# none"},{"path":"https://blueskypie.github.io/citree/news/index.html","id":"citree-011","dir":"Changelog","previous_headings":"","what":"citree 0.1.1","title":"citree 0.1.1","text":"Cases leading crashes partykit::ctree() handled, e.g. Inf -Inf converted NA avoid following errors: ” ‘breaks’ unique”","code":""}]
